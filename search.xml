<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[mac下安装Python3]]></title>
      <url>%2F2017%2F04%2F20%2Fmac%E4%B8%8B%E5%AE%89%E8%A3%85Python3%2F</url>
      <content type="text"><![CDATA[前沿对于iOS开发不要随便拆卸系统自带的Python,因为有很多 library 还是使用 Python2.7。 正文 1.安装Xcode 2.安装套件管理工具 Homebrew 3.安装Python 4.设置路径（可选） 5.确认安装 6.使用 7.安装pip等 1 安装Xcode1.1 App Store 搜索Xcode 并安装1.2 安装 Xcode command line tool1.2.1 打开命令行terminal工具- control + space- 输入terminal- 回车1.2.2 安装Xcode command line tool1xcode-select --install2 安装套件管理工具 Homebrew 2.1 安装 Homebrew1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 2.2 查看是否安装成功 1brew doctor 3 安装Python 1brew install python 4 设置路径（可选） 如果不设置路径，则使用python的话，会默认用系统的。(这个没有具体执行，所以这个需要自己尝试) 12## 修改/etc/paths，把/usr/local/bin 移到上面去sudo vim /etc/paths 拓展：查看当前path是什么。PATH 的用途：告诉系統，我们的brew在哪里。会从上往下查找。1echo $PAHTH 5 确认安装 1234// 系统自带的python2.7，目录为/usr/bin/pythonwhich python//brew安装的python3.4,目录为/usr/local/bin/python3which python3 6 使用未执行操作4的情况（推荐）1234// 系统自带的python a.py//brew安装的python3 a.py 执行操作4的情况 1234// 系统自带的/usr/bin/python a.py//brew安装的python a.py 7 安装pip 安装Python2.7以上版本，会自动带pip。 系统自带的python没有pip，只有easy_install 12// 给系统的python安装pipeasy_install pip 使用pip 1234// 系统自带的pip --version//brew安装的pip3 --version 参考1. MAC OSX 正確地同時安裝 PYTHON 2.7 和 PYTHON32. Mac安装python2.x与python3.x3. mac下安装python小坑]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[创建.a文件]]></title>
      <url>%2F2017%2F04%2F05%2F%E5%88%9B%E5%BB%BA-a%E6%96%87%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[###一 创建.a 创建真机.a Valid Architectures设置：armv7｜armv7s｜arm64｜i386｜x86_64 Architectures设置: armv7｜arm64 Build Active Architecture Only ：NO 用真机运行或者选择Generic iOS Device （此时） 创建模拟器.a Valid Architectures设置为：armv7｜armv7s｜arm64｜i386｜x86_64 Architectures设置: i386｜x86_64 Build Active Architecture Only ：NO 合成支持模拟器的和真机的 lipo -create 真机库.a的路径 模拟器库.a的的路径 －output 合成库的名字.a ####注意： 如果Valid Architectures中添加了armv7s，就一定得添加armv7 二 查看.a文件包含的文件取出armv7平台的包： lipo 查看的.a -thin armv7 -output armv7/抽出的.a 查看库中所包含的文件列表： ar -t armv7/抽出的.a 1 xcode6不再构建arm7s 2.iOS开发——制作同时支持armv7，armv7s，arm64，i386，x86_64 3.iOS Device Compatibility Reference 4.App Distribution Guide]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[小工具以及常用第三方库]]></title>
      <url>%2F2017%2F03%2F03%2F%E5%B0%8F%E5%B7%A5%E5%85%B7%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%2F</url>
      <content type="text"><![CDATA[###1 Object-C 时间NSDate的扩展 WMPlayer视频播放器，iOS倒计时，swift框架demo，融云SDK集成Demo，介绍融云SDK即时通讯机制和集成步骤 WXNearbyRadar雷达动画搜索附近的人的演示程序 基于 CALayer 角度渐变库 AngleGradientLayer iOS自定义alertview 即时通信第三方库 基于AFNetworking3.0网络封装 以及 XMNetworking 还有其他一些封装，通用App轮播图，ObjC基于Masonry扩展的自动计算行高带缓存，日志打印支持中文，Swift基于SnapKit扩展的自动计算行高带缓存 下拉选择框 DOPDropDownMenu-Enhanced 类似美团 类似SpringBoard 图标合并删除排序功能 textField弹出datePicker的键盘 照相机 日历 , 高仿小猪短租入住时间选择器 无限循环图片轮播器 iOS 贴纸功能实现 图表 1 iOS 股票的K线图 分时图 （2）另一个iOS-Echarts 高仿新浪微博的图片浏览器，微信里集成的相册功能 提醒的小红点 标签管理，通用型遮罩层 裁剪器 渐变导航条 电子阅读器 iOS 中一款优雅的搜索控制器 App启动加载广告页面思路 使用x3图片批量生成x2、x1图片 启动页广告。 促销栏、头条栏、广播栏、广告栏 button按钮文字图片任意布局 悬浮button floating action button ###2 Swift 聊天界面 Track- 一个swift的cache库，支持LRU(近期最少使用算法) Swift开源下拉刷新和加载更多组件 UIAlertController 一个弹框 FTImageViewer 图片浏览器 滑动条 ###3 小工具 显示隐藏文件夹]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[# Hexo3.0和Github搭建博客（二）--站点以及Next主题配置]]></title>
      <url>%2F2017%2F02%2F17%2FHexo3-0%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89-%E7%AB%99%E7%82%B9%E4%BB%A5%E5%8F%8ANext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[配置文件站点配置文件：myBlog/_config.yml123456789101112131415161718language: zh-Hans #设置语言title: 我的博客 #博客标题subtitle: 梦想 #博客副标题description: 这个blog自己看的 #博客描述author: 我 #博客描述theme: next #博客主题post_asset_folder: true #引用本地图片deploy:type: git ##部署类型，其它类型自行google之repo: https://github.com/aaa/aaa.github.io ##git仓库地址search:path: search.xml #搜索功能，需要安装hexo-generator-searchdbfield: postformat: htmllimit: 10000#多说评论和分享duoshuo_shortname: abcduoshuo_share: true 主题配置文件：myBlog/themes/next/_config.yml 12# 主题风格,其他用#注释掉scheme: Pisces 注意：配置文件要符合英文标点符号使用规范:冒号后必须空格，否则会编译错误 Hexo其他设置 设置包括：标签、分类、关于、站点搜索、引用本地图片、发布 1.添加标签页面 hexo new page tags 生成index.md文件，添加type字段123456//文件路径：myBlog/source/tags/index.md---title: tagsdate: 2016-11-15 19:10:05type: &quot;tags&quot;--- 2.添加分类页面 hexo new page categories 生成index.md文件，添加type字段123456//文件路径：myBlog/source/categories/index.md---title: categoriesdate: 2016-11-15 19:11:13type: &quot;categories&quot;--- 3.设置具体文章的categories和tag1234567//文件路径：myBlog/source/_posts/Hexo3.0和Github搭建博客.md---title: Hexo3.0和Github搭建博客date: 2017-02-15 15:41:16tags: [npm, hexo, github]categories: 搭建博客--- 4.设置关于我页面 hexo new page about 生成index.md文件,修改如下：1234567891011---//文件路径： myBlog/source/about/index.mdtitle: aboutdate: 2016-11-15 19:08:50---## 关于我一只学习前端的小菜鸟，欢迎分享知识。From: jcQQ：110Email: 110 5.加入站点内容搜索功能5.1 安装hexo-generator-searchdb npm install hexo-generator-searchdb –save 5.2 添加search字段123456//站点配置：myBlog/_config.yml中search:path: search.xmlfield: postformat: htmllimit: 10000 6.加入多说评论、分享功能登陆多说： 在站点的myBlog/_config.yml中加入duoshuo_shortname字段 duoshuo_shortname:aaa 在站点的myBlog/_config.yml中加入duoshuo_share字段 duoshuo_share: ture 7.引用图片7.1 站点的myBlog/_config.yml中修改post_asset_folder post_asset_folder: true 7.2 安装插件 npm install https://github.com/CodeFalling/hexo-asset-image – save 7.3 引用图片7.3.1 利用标签引用1231 &#123;% asset_path slug %&#125;2 &#123;% asset_img slug [title] %&#125;3 &#123;% asset_link slug [title] %&#125; 7.3.2 利用makdown1![例子](例子.png) 7.博客预览和生成、部署7.1 浏览和发布1234567#浏览hexo chexo -g s或#发布hexo chexo -g d 7.2 其他1234567hexo c = hexo clean # 清空,有问题的时候，先清空再发布hexo g = hexo generate #生成hexo s = hexo server #启动本地预览hexo d = hexo deploy #远程部署hexo n &quot;文章标题&quot; = hexo new &quot;文章标题&quot; #新建一篇博文hexo s -g #等同先输入hexo g，再输入hexo shexo d -g #等同先输入hexo g，再输入hexo d 1.Hexo官方中文文档2.Next官方中文文档3.知乎上主题推荐]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo3.0和Github搭建博客]]></title>
      <url>%2F2017%2F02%2F15%2FHexo3.0%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[1 配置环境1.1 安装brew1.1.1 命令行输入： 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 1.1.2 检验是否成功 1brew doctor 1.2 安装git1brew install git 1.3 安装nvm1brew install nvm 1.3.1 为了让你可以直接在shell使用nvm指令，必须创建nvm的工作目录，并且在你的 .bash_profile 加入以下两行： 12export NVM_DIR=~/.nvm. $(brew --prefix nvm)/nvm.sh 1.3.2 终端按顺序执行以下命令: 123mkdir ~/.nvmecho &quot;export NVM_DIR=~/.nvm&quot; &gt;&gt; .bash_profileecho &quot;. $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile 1.3.3 重新source你的 .bash_profile来让设定生效: 1. ~/.bash_profile 1.3.4 验证nvm是否正确安装 1nvm help 1.4 安装node1.4.1 安装稳定版本1nvm install stable 1.5 安装Hexo1.5.1 命令行输入1npm install -g hexo-cli 1.5.2 初始化博客文件夹 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 2 Git Pages 服务准备2.1 注册Github账号2.2 创建仓库,名字为[你的用户名].github.io 在Repository name一栏填[你的用户名].github.io，[你的用户名]是你 Github 上的用户名，请务必按照此格式填写，否则无法在 Github 上部署博客 2.3 设置git12git config --global user.email &quot;你的邮箱&quot;git config --global user.name &quot;你的用户名&quot; 2.4 生成密钥，设置密码，输入的密码不显示（也可以不设置，按三次回车，密码为空）1ssh-keygen -t rsa -C &quot;你的邮箱&quot; 2.5 查看生成的ssh keys中的公钥，并复制1cat ~/.ssh/id_rsa.pub 2.6 添加SSH keys 到Github1点击右上角的头像打开setting，点击SSH Keys，点击右上角的New SSH key，将公钥复制进去创建即可 3 发布博客3.1 安装发布器插件1npm install hexo-deployer-git --save 3.2 修改站点配置文件_config.yml123deploy:type: git ##部署类型，其它类型自行google之repo: &lt;repository url&gt; ##git仓库地址 3.3 本地运行123456hexo clean # 清空hexo generate 或 hexo g # 生成hexo server 或 hexo s # 本地运行或hexo clean # 清空hexo s -g # 生成、运行 3.4 发布123456hexo clean # 清空hexo generate 或 hexo g # 生成hexo deploy 或 hexo d # 发布或hexo clean # 清空hexo d -g # 生成、发布 参考：1 gdutxiaoxu–手把手教你用Hexo+Github 搭建属于自己的博客2 syd–基于Hexo和Github搭建博客3 vinnyxiong_熊远文 – Hexo之旅(二)：Hexo博客搭建(在 Mac OS 平台)4 白衣秀才 – Hexo+Github搭建个人博客)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F15%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
